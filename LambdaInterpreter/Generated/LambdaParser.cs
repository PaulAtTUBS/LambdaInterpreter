//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from res/Grammar/LambdaParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LambdaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, LAMBDA=2, IDENTIFIER=3, BRACKET_L=4, BRACKET_R=5, DOT=6;
	public const int
		RULE_term = 0, RULE_function = 1, RULE_variable = 2, RULE_brackets = 3;
	public static readonly string[] ruleNames = {
		"term", "function", "variable", "brackets"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\\'", null, "'('", "')'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LAMBDA", "IDENTIFIER", "BRACKET_L", "BRACKET_R", "DOT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LambdaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LambdaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LambdaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LambdaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TermContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public BracketsContext[] brackets() {
			return GetRuleContexts<BracketsContext>();
		}
		public BracketsContext brackets(int i) {
			return GetRuleContext<BracketsContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILambdaParserListener typedListener = listener as ILambdaParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILambdaParserListener typedListener = listener as ILambdaParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILambdaParserVisitor<TResult> typedVisitor = visitor as ILambdaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 0, RULE_term);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 11;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IDENTIFIER:
						{
						State = 8; variable();
						}
						break;
					case LAMBDA:
						{
						State = 9; function();
						}
						break;
					case BRACKET_L:
						{
						State = 10; brackets();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 15;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public VariableContext _variable;
		public IList<VariableContext> _parameters = new List<VariableContext>();
		public ITerminalNode LAMBDA() { return GetToken(LambdaParser.LAMBDA, 0); }
		public ITerminalNode DOT() { return GetToken(LambdaParser.DOT, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILambdaParserListener typedListener = listener as ILambdaParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILambdaParserListener typedListener = listener as ILambdaParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILambdaParserVisitor<TResult> typedVisitor = visitor as ILambdaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; Match(LAMBDA);
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 17; _localctx._variable = variable();
				_localctx._parameters.Add(_localctx._variable);
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 22; Match(DOT);
			State = 23; term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LambdaParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILambdaParserListener typedListener = listener as ILambdaParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILambdaParserListener typedListener = listener as ILambdaParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILambdaParserVisitor<TResult> typedVisitor = visitor as ILambdaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 4, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketsContext : ParserRuleContext {
		public ITerminalNode BRACKET_L() { return GetToken(LambdaParser.BRACKET_L, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode BRACKET_R() { return GetToken(LambdaParser.BRACKET_R, 0); }
		public BracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brackets; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILambdaParserListener typedListener = listener as ILambdaParserListener;
			if (typedListener != null) typedListener.EnterBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILambdaParserListener typedListener = listener as ILambdaParserListener;
			if (typedListener != null) typedListener.ExitBrackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILambdaParserVisitor<TResult> typedVisitor = visitor as ILambdaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketsContext brackets() {
		BracketsContext _localctx = new BracketsContext(Context, State);
		EnterRule(_localctx, 6, RULE_brackets);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(BRACKET_L);
			State = 28; term();
			State = 29; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\b', '\"', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', '\x15', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x16', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x2', '\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\x2', '\x2', '!', 
		'\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x4', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\b', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xE', '\x5', '\x6', '\x4', '\x2', '\v', 
		'\xE', '\x5', '\x4', '\x3', '\x2', '\f', '\xE', '\x5', '\b', '\x5', '\x2', 
		'\r', '\n', '\x3', '\x2', '\x2', '\x2', '\r', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x12', '\x14', '\a', '\x4', 
		'\x2', '\x2', '\x13', '\x15', '\x5', '\x6', '\x4', '\x2', '\x14', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\a', '\b', '\x2', '\x2', '\x19', '\x1A', '\x5', '\x2', '\x2', '\x2', 
		'\x1A', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x5', 
		'\x2', '\x2', '\x1C', '\a', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', '\x6', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\x2', '\x2', '\x2', 
		'\x1F', ' ', '\a', '\a', '\x2', '\x2', ' ', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\r', '\xF', '\x16',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Antlr
